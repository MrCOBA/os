РАЗДЕЛЯЕМАЯ ПАМЯТЬ

System V IPC (InterProcess Communications) – механизм передачи данных между процессами: очереди сообщений, разделемая память и семафоры.

Пространство имён всех объектов System V IPC - целочисленный тип key_t (получается из имени файла, к которому есть доступ на чтение, и небольшого целого числа – например, номера экземпляра средства связи)

#include <sys/types.h>
#include <sys/ipc.h>
key_t ftok(char *pathname, char proj) - получение значения ключа объекта System V IPC из двух компонентов. При невозможности генерации ключа возвращает отриц. значение. key_t  обычно 32-битный тип.
* Фaйл должен существовать и доступен для чтения
* Файл должен оставаться в таком состоянии, пока все участники обмена не получат ключ
* Информация будет храниться не в этом файле, а в адресном пространстве ОС

Информация о потоках ввода-вывода , с которыми имеет дело процесс, ОС хранит в таблице открытых файлов процесса. Ключём для доступа к потоку является файловый дексриптор - его индекс в этой таблице.
При завершении процесса закрываются его IO-потоки.
НО: в System V IPC ОС хранит все объекты этого механизма вне контекста процессов, они тоже имеют дескрипторы (идентификаторы) - неотрицательные целые числа


РАЗДЕЛЯЕМАЯ ПАМЯТЬ

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
int shmget(key_t key, int size, int shmflg);
Операция доступа к сегменту разделяемой памяти. В случае успеха возвращает дескриптор System V IPC этого сегмента, иначе возвращает -1.

char *shmat(int shmid, char *shmaddr, int shmflg);
Включение области разделяемой памяти в адресное пространство процесса. Возвращает адрес сегмента разделяемой памяти в адресном пространстве процесса или -1.

int shmdt(char *shmaddr);
Исключает область разделяемой памяти из адресного пространства процесса. Возвращает 0 или -1.

int shmctl(int shmid, IPC_RMID, NULL);
удаление области разделяемой памяти с дескриптором shmid

Команды командной строки:
ipcs – показать все объекты System V IPC
ipcrm shm <id> – удалить область разделяемой памяти с таким id
(на macOS  это ipcrm -m <id>)

ТРЕДЫ

#include <pthread.h>
pthread_t pthread_self(void);
Возвращает идентификатор текущей нити исполнения (целое число).

void pthread_exit(void *status);
Завершение треда процесса. Не возвращается в вызвавший её тред.

int pthread_join (pthread_t thread, void **status_addr);
"Ждёт" завершения другого треда. Вовзращает 0 при успехе, иначе - положительное значение с кодом ошибки.

int pthread_create(pthread_t *thread, pthread_attr_t *attr, void * (*start_routine)(void *), void *arg);
Создание нового треда внутри процесса. При удачном завершении возвращает 0, а по адресу thread помещает идентификатор нового треда. При ошибке возращается ПОЛОЖИТЕЛЬНОЕ значение с кодом ошибки.

void *start_routine(void *) - выполнение функции треда с параметрами arg.

Программы с нитями исполнениями (тредами) нужно компилировать с ключём -lpthread (иначе библиотека не загрузится)