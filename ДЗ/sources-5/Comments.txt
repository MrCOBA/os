ОЧЕРЕДИ СООБЩЕНИЙ (System V IPC)

Располагаются в адресном пространстве ядра ОС в виде однонаправленных список.

Имеют атрибут - ТИП сообщения.

Выборка сообщений из очереди выполняется 3 способами:

- порядок FIFO независимо от типа сообщения
- порядок FIFO для сообщений конкретного типа
- Первым выбирается сообщение с минимальным типом, не превышающим заданного значения, в порядке FIFO

Процесс блокируется при вызове receive, если очередь пустая или в ней нет сообщения нужного типа, и при вызове send, если очередь заполнена.


___Системные вызовы___

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

int msgget(key_t key, int msgflg);
Получение доступа к очереди сообщений (если её нет - ещё и создание). Вовзращает дескриптор System V IPC этой очереди или -1 (при ошибке).

int msgsnd(int msqid, struct msgbuf *ptr, int length, int flag);
Выполняет примитив send(), копирует пользовательское сообщение в очередь сообщений. Возвращает 0 при нормальном завершении и -1 при ошибке.
    
    msqid - дескриптор очереди сообщений

    struct msgbuf - тип данных для сообщений, ШАБЛОН!!! для них, первым полем должна быть переменная типа long с положительным значением типа сообщения

    length - длина не всех данных, а полезной информации (которая идёт после типа сообщения), может быть и равна 0, если важен сам факт прихода сообщения (сигнальная связь)

    flag - мы всегда ипользуем 0 (а бывает и IPC_NOWAIT), приводит к блокировке процесса при заполненности очереди сообщений

int msgrcv(int msqid, struct msgbuf *ptr, int length, long type, int flag);
Выполняет примитив  receive(), получает сообщение из очереди. Возвращает длину полученной полезной информации или -1 при ошибке. Удаляет сообщение из очереди.

    type - тип нужных сообщений:
        0 - все сообщения
        n - тип сообщений n
        -n - сообщение с минимальным типом (из тех, что есть), меньшим или равным n

    length - максимальная длина полезной информации

    flag - ставим 0 (блокировка процесса, если нет нужных сообщений, и ошибка, если длина реальной полезной информации больше length), бывают IPC_NOWAIT и MSG_NOERROR

    ptr - адрес, куда копировать полученное сообщение

int msgctl(int msqid, int cmd, struct msqid_ds *buf);
Используем для удаления очереди сообщений из системы.

    cmd - используем только IPC_RMID (удаление очереди с переданным id)

    buf - ставил NULL

___Команды терминала___

ipcs -l - показывает ограничение на количество хранимой информации
(в macOS вместо этого есть ключи -a и -b)

ipcs - информация об объектах System V IPC, существующих на момент вызова в системе

ipcr msg <id> - удаление очереди сообщений с выбранным id
(на macOS ipcs -q)